}
else{
fact=1;
for (i in 1:num_ent)
{
fact=fact*i;
}
}
return(fact)
}
pdf_bin<-function(n,p,x1,x2)
{
acumulada<-0
for (i in x1:x2)
{
value= cal_fact(n)/( cal_fact(i)*cal_fact(n-i) )*p^(i)*(1-p)^(n-i)
#print(value)
acumulada=acumulada+value
#print(acumulada)
}
return(acumulada)
}
#Ahora calculamos lo que nos requiere el inciso a y b
#P(X=0)
pdf_bin(123,0.31,0,0)
dbinom(0,123,0.31,log=FALSE)
#P(X=123)
pdf_bin(123,0.31,123,123)
dbinom(123,123,0.31,log=FALSE)
#P(X=62)
pdf_bin(123,0.31,62,62)
dbinom(62,123,0.31,log=FALSE)
#P(0<=X<=10)
pdf_bin(123,0.31,0,10)
pbinom(10,123,0.31)-pbinom(0,123,0.31)
cuan_bin<-function(size,prob,q)
{
i<- 0
p<- 0
while(p<=q)
{
#print(size)
#  print(prob)
p=pdf_bin(size,prob,0,i)
#print(p)
i=i+1
}
return(i-1)
}
#Ahora obtenemos lo que el ejercicio nos pide
#¿Existe alguna función en R que calcule cuantiles? Sí, qbinom
#Calcular el cuantil de 0.25
cuan_bin(123,0.31,0.25)
qbinom(0.25,123,0.31)
#Calcular el cuantil de 0.5
cuan_bin(123,0.31,0.5)
qbinom(0.5,123,0.31)
#Calcular el cuantil de 0.75
cuan_bin(123,0.31,0.75)
qbinom(0.75,123,0.31)
rm(list=ls())
n=1000000;#¿Cuántas repeticiones quieres?
simular<-function(n){
urna=c(rep(1,46),rep(2,49))#El uno son bolas grises, el 2 bolas blancas
simulacion=rep(0,n)
for (i in c(1:n))
{
simulacion[i]=data.frame(table(sample(urna,20,replace = FALSE) ) )[1,2];
}
returnValue(simulacion);
}
simulacion=simular(n)#Repetimos el experimento 10^6
simulacion[1:3]#Mostramos los tres primeros resultados
resultados=data.frame(table(simulacion)) #contamos las frecuencias
#Graficamos las frecuencias de las bolas grises obtenidas
plot(resultados$simulacion,resultados$Freq)
#Graficamos la probabilidad de que salga cierto número de bolas grises
plot(resultados$simulacion,resultados$Freq/n)
#Graficamos las frecuencias de las bolas grises obtenidas
plot(resultados$simulacion,resultados$Freq)
#Graficamos la probabilidad de que salga cierto número de bolas grises
plot(resultados$simulacion,resultados$Freq/n)
hip_res=matrix(0,21,2);
for(i in 0:20)
{
hip_res[i,1]=i;
hip_res[i,2]=dhyper(x=i,46,49,20);
}
rm(i)#Borramos el contador
res_hip=as.data.frame(hip_res)
colnames(res_hip)=c("Num_grises","Prop_hip")
colnames(resultados)=c("Num_grises","Prop_exp")
#creamos un arrglo que tenga los tres resultados con proporciones
comp=merge(res_hip,resultados, by="Num_grises", all=TRUE)
#¿Cuál es la probabilidad de que al extraer 20 bolas de la urna 5 sean grises?
#Si lo calculamos con la simulación es:
comp[which(comp[,1]==5),3]/n
#Si lo calculamos con el cálculo de la binomial:
comp[which(comp[,1]==5),2]
#Graficamos uno encima del otro
plot(comp$Num_grises,comp$Prop_exp/n,type="h",col="cornflowerblue",lwd = 10,xlab="# Bolas Grises",ylab="Proporción")
par(bty = 'n')
points(comp$Num_grises,comp$Prop_hip,type="p",col="red",lwd = 10)
# Ejercicio 5a
# Distribución uniforme para n=5
n<-5
x<-c(1:n)
fx<-rep(1/n,n)
plot(x,fx,type = "h",xlab = "x",ylab = "f(x)",main = "Función de masa")
fdacum1<-plot(ecdf(x),xlab = "x",ylab = "F(x)",main = "Función Acumulada")
#Distribución uniforme para n=10
n<-10
x<-c(1:n)
fx<-rep(1/n,n)
plot(x,fx,type = "h",xlab = "x",ylab = "f(x)",main = "Función de masa")
fdacum1<-plot(ecdf(x),xlab = "x",ylab = "F(x)",main = "Función Acumulada")
#Distribución uniforme para n=50
n<-50
x<-c(1:n)
fx<-rep(1/n,n)
plot(x,fx,type = "h",xlab = "x",ylab = "f(x)",main = "Función de masa")
fdacum1<-plot(ecdf(x),xlab = "x",ylab = "F(x)",main = "Función Acumulada")
#ejercicio 5c
x<-c(1:10)
set.seed(13)
muestra1<-sample(x,size = 10000,replace = T,prob = NULL)
tabla<-table(muestra1)
tabla
media<-mean(muestra1)
varianza<-var(muestra1)
media
varianza
#ejercicio 5d
hist(muestra1)
se ve como si no estuviese definda en todo el soporte , prueba con la linea:
barplot(muestra1)
barplot(muestra1)
muestra1
se ve como si no estuviese definda en todo el soporte , prueba con la linea:
barplot(table(muestra1))
moneda<-c(0,1)    # 1 son águilas
muestra6<-sample(moneda,size = 10,replace = T,prob = NULL)
muestra6
numaguilas<-sum(muestra6)
numaguilas # conteo de águilas en 10 lanzamientos
frectiro<-c(rep(0,1000000)) #Mide el número de águilas
for(i in 1:1000000){ #Lanzamiento de moneda 1000000 veces
frectiro[i]<-sum(sample(moneda, size = 10, replace=T, prob = NULL))
}
hist(frectiro)
m<-c(0:10)
table(frectiro)
prop.table(table(frectiro))
plot(prop.table(table(frectiro)),type="h",col="blue",xlab = "aguilas",ylab = "frecuencia",main = "Comparación con Binomial")
par(new=T)
plot(dbinom(m,10,.5),type = "h",axes = FALSE,col="pink",xlab = " ",ylab = " ",main = " ")
plot(dbinom(m,10,.5),type = "h",axes = FALSE,col="pink",xlab = " ",ylab = " ",main = " ")
moneda<-c(0,1) # 1 son aguilas
frectiro<-c(rep(0,1000000))
for(i in 1:1000000){
frectiro[i]<-sum(sample(moneda, size = 10, replace=T, prob = c(.7,.3))) # los eventos ya no tienen la misma probabilidad
}
hist(frectiro)
m<-c(0:10)
table(frectiro)
prop.table(table(frectiro))
plot(prop.table(table(frectiro)),type="h",col="blue",xlab = "aguilas",ylab = "frecuencia",main = "Comparación con Binomial")
par(new=T)
plot(dbinom(m,10,.3),type = "h",axes = FALSE,col="pink",xlab = " ",ylab = " ",main = " ")
plot(dbinom(m,10,.3),type = "h",axes = FALSE,col="pink",xlab = " ",ylab = " ",main = " ")
n<-123
p<-.31
# P(x=0)
x<-0
choose(123,x)*(p)^(x)*(1-p)^(n-x)
x<-123
choose(123,x)*(p)^(x)*(1-p)^(n-x)
x<-62
choose(123,x)*(p)^(x)*(1-p)^(n-x)
a<-0
b<-10
px1<-0
for(i in a:b){ # Suma las probabilidades acumuladas en el intervalo
px1<-px1+choose(123,i)*(p)^(i)*(1-p)^(n-i)
}
px1
a<-1
b<-10
px1<-0
for(i in a:b){ # Suma las probabilidades acumuladas en el intervalo
px1<-px1+choose(123,i)*(p)^(i)*(1-p)^(n-i)
}
px1
a<-0
b<-9
px1<-0
for(i in a:b){ # Suma las probabilidades acumuladas en el intervalo
px1<-px1+choose(123,i)*(p)^(i)*(1-p)^(n-i)
}
px1
a<-12
b<-123
px1<-0
for(i in a:b){ #Suma las probabilidades acumuladas en el intervalo
px1<-px1+choose(123,i)*(p)^(i)*(1-p)^(n-i)
}
px1
a<-0
b<-10
a<-0
b<-10
px1<-0
for(i in a:b){ #Suma las pobabilidades acumuladas en el intervalo
px1<-px1+choose(123,i)*(p)^(i)*(1-p)^(n-i)
}
px1
#ejercicio 7b
dbinom(0,123,0.31) # P(X=0)
dbinom(123,123,0.31) #P(x=123)
dbinom(62,123,0.31) # P(X=62)
pbinom(10,123,0.31) #P(0<=x<=10)
pbinom(10,123,0.31)-pbinom(0,123,0.31) # P(0<x<=10)
pbinom(9,123,0.31) # P(0<=x<10)
1-pbinom(11,123,0.31) # P(X>11)
pbinom(10,123,0.31) # P(X>=10)
#ejercicio 7c
qbinom(0.25,123,0.31) # Cuantil 0.25
qbinom(0.5,123,0.31) #Cuantil 0.50
qbinom(0.75,123,0.31) # Cuantil 0.75
urna<-c(rep(1,46),rep(0,49)) # 1 son bolas grises
muestra3<-sample(urna,size = 20,replace = F,prob = NULL)
muestra3
numgrises<-sum(muestra3)
numgrises
frecgris<-c(rep(0,1000000)) # Mide la frecuencia de la bola gris
for(i in 1:1000000){ # Proceso para simular 1000000 repeticiones
frecgris[i]<-sum(sample(urna, size = 10, replace=T, prob = NULL))
}
hist(frecgris)
m<-c(0:20)
table(frecgris)
prop.table(table(frecgris))
plot(prop.table(table(frecgris)),type="h",col="blue",xlab = "bola gris",ylab = "frecuencia",main = "Comparación Hipergeométrica")
par(new=T)
plot(dhyper(m,46,49,20),type = "h",axes = FALSE,col="pink",xlab = " ",ylab = " ",main = " ")
dhyper(m,46,49,20)
plot(prop.table(table(frecgris)),type="h",col="blue",xlab = "bola gris",ylab = "frecuencia",main = "Comparación Hipergeométrica")
par(new=T)
plot(dhyper(m,46,49,20),type = "h",axes = FALSE,col="pink",xlab = " ",ylab = " ",main = " ")
plot(prop.table(table(frecgris)),type="h",col="blue",xlab = "bola gris",ylab = "frecuencia",main = "Comparación Hipergeométrica")
plot(dhyper(m,49,46,20),type = "h",axes = FALSE,col="pink",xlab = " ",ylab = " ",main = " ")
plot(prop.table(table(frecgris)),type="h",col="blue",xlab = "bola gris",ylab = "frecuencia",main = "Comparación Hipergeométrica")
par(new=T)
plot(dhyper(m,49,46,20),type = "h",axes = FALSE,col="pink",xlab = " ",ylab = " ",main = " ")
m
dhyper(m,46,49,20)
prop.table(table(frecgris))
dhyper(m,46,49,20)
#ejecicio 8d
dhyper(5,46,49,20)
---
#  title: "Tarea 1 Inferencia Estadística"
#author: "Hairo Ulises Miranda Belmonte"
#date: "28 de agosto de 2018"
#5. Para el siguiente ejercicio es necesario el programa R.
#a) Escriba un programa en R que reproduzca las gráficas de las funciones de distribución
#acumulada y de masa de la distribución uniforme que aparecen en las notas del curso.
#Las gráficas deben verse similares a las figuras de la Figura 1.
rm(list=ls())
pmf<-0
for(i in seq(1,10,1)){ #generando los lanzamientos
pmf[i]<-dunif(i,min = 0,max = 10, log = FALSE)
}
SampleSpace<-1:10
plot(SampleSpace,pmf, type = "b", main="PMF Uniforme Discreta", xlab = "Espacio Muestral",
ylab = "Probabilidad",ylim=c(0, 1))
plot(SampleSpace,pmf, type = "b", main="PMF Uniforme Discreta", xlab = "Espacio Muestral",
ylab = "Probabilidad",ylim=c(0, 1))
cdf<-0
for(i in seq(1,10,1)){#función de distribución
cdf[i]<-punif(i,min = 0,max = 10, log = FALSE)
}
SampleSpace<-1:10
plot(SampleSpace,cdf, type = "b", main="CDF Uniforme Discreta", xlab = "Espacio Muestral",
ylab = "Probabilidad Acumulada",ylim=c(0, 1))
# Diapositiva número 14.
plot(dunif(0:5, 0, 5), type="h", ylim=c(0,.3), xlim=c(0,5), main="PMF UNIFORM (n=5)", ylab="f(x)", xlab="x") # n = 5 pmf
# Diapositiva número 14.
plot(dunif(0:5, 0, 5), type="h", ylim=c(0,.3), xlim=c(0,5), main="PMF UNIFORM (n=5)", ylab="f(x)", xlab="x") # n = 5 pmf
t <- c(0:4)
x <- punif(0:5, 0, 5) # CDF n=5
plot(stepfun(t, x), xlab="x", ylab="F(x)", main="CDF UNIFORM (n=5)",
do.points = FALSE, pch = 16,verticals = FALSE)
# Diapositiva número 15.
plot(dunif(0:10, 0, 10), type="h", ylim=c(0,.12), xlim=c(0,10), main="PMF UNIFORM (n=10)", ylab="f(x)", xlab="x") # n = 10 pmf
t <- c(0:9)
x <- punif(0:10, 0, 10) # CDF n=10
plot(stepfun(t, x), xlab="x", ylab="F(x)", main="CDF UNIFORM (n=10)",
do.points = FALSE, pch = 16,verticals = FALSE)
# Diapositiva número 16.
plot(dunif(0:50, 0, 50), type="h", ylim=c(0,.030), xlim=c(0,50), main="PMF UNIFORM (n=50)", ylab="f(x)", xlab="x") # n = 50 pmf
t <- c(0:49)
x <- punif(0:50, 0, 50) # CDF n=50
plot(stepfun(t, x), xlab="x", ylab="F(x)", main="CDF UNIFORM (n=50)",
do.points = FALSE, pch = 16,verticals = FALSE, xlim=c(0,50))
rm(list=ls())
set.seed(13)#fijando la semilla en 13
uniform<-sample(round(runif(10000,1,10)))
table(uniform)#frecuencia
#La media es de:
mean(uniform)
#La varianza es de:
var(uniform)
uniform<-sample(round(runif(10000,1,10)))
rm(list=ls())
set.seed(13)#fijando la semilla en 13
uniform<-sample(round(runif(10000,1,10))) #te faltaron
table(uniform)#frecuencia
set.seed(13)#fijando la semilla en 13
uniform<-sample(round(runif(10000,1,10))) # no es lo que se requeria checa la comparacion en las dos lineas siguientes
plot(table(uniform))
set.seed(13)#fijando la semilla en 13
set.seed(13)#fijando la semilla en 13
uniform<-sample(1:10,10000) # no es lo que se requeria checa la comparacion en las dos lineas siguientes
uniform<-sample(1:10,10000, replace=TRUE) # no es lo que se requeria checa la comparacion en las dos lineas siguientes
set.seed(13)#fijando la semilla en 13
uniform<-sample(1:10,10000, replace=TRUE) # no es lo que se requeria checa la comparacion en las dos lineas siguientes
plot(table(uniform))
#La media es de:
mean(uniform)
#La varianza es de:
var(uniform)
plot(table(uniform), type="h", main="Histograma", xlab = "Espacio Muestral",
ylab = "Frecuencia", ylim=c(0, 1500))
rm(list=ls())
set.seed(13)#fijando la semilla en 13
uniform<-sample(round(runif(10000,1,10))) # no es lo que se requeria checa la comparacion en las dos lineas siguientes
#set.seed(13)#fijando la semilla en 13
#uniform<-sample(round(runif(10000,1,10))) # no es lo que se requeria checa la comparacion en las dos lineas siguientes
#plot(table(uniform))
#set.seed(13)#fijando la semilla en 13
#uniform<-sample(1:10,10000, replace=TRUE) # no es lo que se requeria checa la comparacion en las dos lineas siguientes
plot(table(uniform))
#de lo anterior infiero que no leiste la documentación de la función 'sample'
table(uniform)#frecuencia
#La media es de:
mean(uniform)
#La varianza es de:
var(uniform)
plot(table(uniform), type="h", main="Histograma", xlab = "Espacio Muestral",
ylab = "Frecuencia", ylim=c(0, 1500))
plot(table(uniform), type="h", main="Histograma", xlab = "Espacio Muestral",
ylab = "Frecuencia", ylim=c(0, 1500))
rm(list=ls())
count3<-0
set.seed(10)#fijando la semilla en 10
LanzamientoMoneda3<-sample(0:1,10,.5)
LanzamientoMoneda3
count3<-(length(which(LanzamientoMoneda3==1)))
count3
rm(list=ls())
count4<-rep(0,1000000)
pb<-txtProgressBar(1, 1000000,1)
for (i in seq(1,1000000,1)){
LanzamientoMoneda4<-sample(0:1,10,.5)
count4[i]<-(length(which(LanzamientoMoneda4==1)))
setTxtProgressBar(pb,i)
}
count4[1:3]
hist(count4, xlab="Aguilas", main="Lanzamientos")
b<-table(count4)
c<-rep(0,11)
for (i in seq(1,length(b),1)){
c[i]<-b[[i]]/1000000
}
a<-rep(0,10)
for (i in seq(0,10,1)){
a[i]<-dbinom(i, 10,.5)
}
plot(a, type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)", main = "Pmf  binomial", xlim = c(0,10), col="red")
plot(c[1:10], type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)" , main= "Pmf  sample", xlim = c(0,10))
#comparando las PMF
plot(a, type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)" , main= "Pmf", xlim = c(0,10), ylim=c(0,.3), col="red")
lines(1:10+.09,c[1:10], type="h", ylim=c(0,.25))
legend("topright", legend=c("Binomial", "Sample"), pch=c(1,10),
col=c("red", "black"),
horiz=FALSE, bty='n', cex=0.9)
length(b)
a<-rep(0,10)
for (i in seq(0,10,1)){
a[i]<-dbinom(i, 10,.5)
}
plot(a, type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)", main = "Pmf  binomial", xlim = c(0,10), col="red")
plot(c[1:10], type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)" , main= "Pmf  sample", xlim = c(0,10))
plot(a, type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)", main = "Pmf  binomial", xlim = c(0,10), col="red")
plot(c[1:10], type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)" , main= "Pmf  sample", xlim = c(0,10))
plot(a, type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)", main = "Pmf  binomial", xlim = c(0,10), col="red")
plot(c[1:10], type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)" , main= "Pmf  sample", xlim = c(0,10))
#comparando las PMF
plot(a, type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)" , main= "Pmf", xlim = c(0,10), ylim=c(0,.3), col="red")
lines(1:10+.09,c[1:10], type="h", ylim=c(0,.25))
legend("topright", legend=c("Binomial", "Sample"), pch=c(1,10),
col=c("red", "black"),
horiz=FALSE, bty='n', cex=0.9)
#comparando las PMF
plot(a, type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)" , main= "Pmf", xlim = c(0,10), ylim=c(0,.3), col="red")
lines(1:10+.09,c[1:10], type="h", ylim=c(0,.25))
legend("topright", legend=c("Binomial", "Sample"), pch=c(1,10),
col=c("red", "black"),
horiz=FALSE, bty='n', cex=0.9)
rm(list=ls())
count2<-rep(0,1000000)
pb<-txtProgressBar(1, 1000000,1)
for (i in seq(1,1000000,1)){
LanzamientoMoneda2<-sample(0:1,10,.3)
count2[i]<-(length(which(LanzamientoMoneda2==1)))
setTxtProgressBar(pb,i)
}
count2[1:3]
hist(count2, xlab="Aguilas", main="Lanzamientos")
b<-table(count2)
c<-rep(0,11)
for (i in seq(1,length(b),1)){
c[i]<-b[[i]]/1000000
}
a<-rep(0,10)
a<-dbinom(0:10, 10,.3)
plot(a, type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)", main = "Pmf  binomial", xlim = c(0,10), col="red")
plot(c, type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)" , main= "Pmf  sample", xlim = c(0,10))
plot(a, type="h", xlab="Lanzamientos [#de Aguilas]", ylab="f(x)" , main= "Pmf", xlim = c(0,10), ylim=c(0,.31), col="red")
lines(0:10+.07, c, type="h", xlim = c(1,10), ylim=c(0,.31))
legend("topright", legend=c("Binomial", "Sample"), pch=c(1,10),
col=c("red", "black"),
horiz=FALSE, bty='n', cex=0.9)
rm(list=ls())
PmfBinomial<-dbinom(0:123, 123, 0.31)
plot(PmfBinomial, type = "h", ylab="Pr", xlab="Valores que toma X", main = "CDF Binomial", xlim=c(0,80))
dbinom(0, 123, 0.31)#P(X=0)
PmfBinomial[123]#P(X=123)
PmfBinomial[62+1]#P(X=62)
sum(PmfBinomial[0:10+1])#P(0<-X<-10)
sum(PmfBinomial[1:10+1])#P(0<X<-10)
sum(PmfBinomial[0:9+1])#P(0<-X<10)
1-(sum (PmfBinomial[0:10+1]))#P(X>11)
sum(PmfBinomial[0:10+1])#P(X<-10)
dbinom(0, 123, 0.31)
dbinom(123, 123, 0.31)
dbinom(62, 123, 0.31)
pbinom(10, 123, 0.31)
pbinom(10, 123, 0.31)-pbinom(0, 123, 0.31)
pbinom(9, 123, 0.31)
1-pbinom(10, 123, 0.31)
pbinom(10, 123, 0.31)
qbinom(0.25, 123, 0.31)
qbinom(0.5, 123, 0.31)
qbinom(0.75, 123, 0.31)
qbinom(0.25, 123, 0.31)
qbinom(0.5, 123, 0.31)
qbinom(0.75, 123, 0.31)
rm(list=ls())
count<-rep(0,1000000)
pb<-txtProgressBar(1, 1000000,1) #medidor de tiempo para simulación
for (i in seq(1,1000000,1)){
urna<-c(rep("gris",46), rep("blanca",49)) #generando urna
muestra<-sample(urna,20)
count[i]<-(length(which(muestra=="gris")))
setTxtProgressBar(pb,i)
}
count[1:3] #mostrando primeros tres resultados
for (i in seq(1,1000000,1)){
urna<-c(rep("gris",46), rep("blanca",49)) #generando urna
muestra<-sample(urna,20)
count[i]<-(length(which(muestra=="gris")))
print(count[i])
setTxtProgressBar(pb,i)
}
rm(list=ls())
count<-rep(0,1000000)
pb<-txtProgressBar(1, 1000000,1) #medidor de tiempo para simulación
for (i in seq(1,1000000,1)){
urna<-c(rep("gris",46), rep("blanca",49)) #generando urna
muestra<-sample(urna,20)
count[i]<-(length(which(muestra=="gris")))
#print(count[i])
setTxtProgressBar(pb,i)
}
count[1:3] #mostrando primeros tres resultados
hist(count,xlab="# de Bolas grises", main= "Bolas Grises") #frecuencia del numero de bolas grises
b<-table(count)
c<-rep(0,10)
#Probabilidades
for (i in seq(1,length(b),1)){
c[i]<-b[[i]]/1000000
}
c[5]#probabilidad de sacar 5 bolas grises. Utilizando sample
pr<-(choose(46, 5)*choose(49, 20-5))/choose(46+49, 20) #probabilidad de sacar 5 bolas grises de una muestra de 20
pr
dhyper(5, 46, 49, 20) #probabilidad de sacar 5 bolas grises de una muestra de 20
a<-rep(0,20)
#Pdf utilizando hipergeometrica
for (i in seq(0,20,1)){
a[i]<-dhyper(i, 46, 49, 20)
}
#Comparando pdf de las simulaciones con saple y función hipergeometrica
plot(a, type="h", xlab="X values", ylab="f(x)", main = "Pmf  Hypergeometric", xlim = c(0,20), col="blue")
plot(c, type="h", xlab="X values", ylab="f(x)" , main= "Pmf  sample", xlim = c(0,20))
plot(a, type="h", xlab="X values", ylab="f(x)" , main= "Pmf  Hypergeometric", xlim = c(0,20), col="blue")
lines(1:19+.2,c, type="h", xlim = c(0,20))
legend("topright", legend=c("Hypergeometric", "sample"), pch=c(1,20),
col=c("blue", "black"),
horiz=FALSE, bty='n', cex=0.9)
1614.68*3
