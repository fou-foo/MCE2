valor$y
ks.test(res$y, valor$y/2 )
plot(res$x,res$y,main="Test K-S")
lines(valor$x*2,valor$y/2,col="blue")
ks.test(L, rmp(n = tamanio_ensemble,ndf = 200,pdim = 100))
ks.test(L/100, rmp(n = tamanio_ensemble,ndf = 200,pdim = 100)/2)
ks.test(L/100, rmp(n = tamanio_ensemble,ndf = 200,pdim = 100)/2, exact = TRUE)
?ks.test
ks.test(L/100, rmp(n = tamanio_ensemble,ndf = 200,pdim = 100)/2, exact = TRUE)
ks.test(L/100, rmp(n = tamanio_ensemble,ndf = 200,pdim = 100)/2, exact = FALSE)
13+15
devtools::install_github('diegovalle/mxmaps')
install.packages("sf")
load("/home/fou/Desktop/Ecobici/DataSubset/.RData")
1270*.2
load('serie_diaria.Rdata')
shiny::runApp('Desktop/Ecobici/Shiny')
runApp('Desktop/Ecobici/Shiny')
load('serie_diaria.Rdata')
setwd("/home/fou/Desktop/Ecobici/Data/")
load('serie_diaria.Rdata')
serie_diaria
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny/dwd')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
?boxcox
?box
?plotlyOutput
runApp('~/Desktop/Ecobici/Shiny')
?box
runApp('~/Desktop/Ecobici/Shiny')
?dashboardHeader
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
setwd("/home/fou/Desktop/Ecobici/DataSubset/")
library(readr)
library(lubridate)
library(hms)
load( file='tablaFiltro.Rdata')
library(ggplot2)
library(plotly)
names(tabla2)
tabla2%>% select(Genero_Usuario, Edad_Usuario ) %>% group_by(Genero_Usuario, Edad_Usuario) %>%
summarise(Porcentaje =n()) -> x
x %>% group_by(Genero_Usuario)%>% summarise(Porcentaje=sum(Porcentaje)) -> x
x$Porcentaje <- x$Porcentaje/sum(x$Porcentaje)
names(x) <- c('Genero', 'Porcentaje')
class(x) <- 'data.frame'
p <- ggplot(x, aes(x=Genero, y=Porcentaje, fill=Genero)) + geom_bar(stat = 'identity')  +
scale_fill_manual(values=c('#604B89', 'orange')) + theme_minimal() +xlab('') +ylab('') +
ggtitle('Distribución del generó')
p <- ggplotly(p)
tabla2 %>% group_by(Fecha_Retiro) %>% summarise(viajes=n()) -> viajes.salida
p
library(dplyr)
setwd("/home/fou/Desktop/Ecobici/DataSubset/")
library(readr)
library(lubridate)
library(dplyr)
library(hms)
load( file='tablaFiltro.Rdata')
library(ggplot2)
library(plotly)
names(tabla2)
tabla2%>% select(Genero_Usuario, Edad_Usuario ) %>% group_by(Genero_Usuario, Edad_Usuario) %>%
summarise(Porcentaje =n()) -> x
x %>% group_by(Genero_Usuario)%>% summarise(Porcentaje=sum(Porcentaje)) -> x
x$Porcentaje <- x$Porcentaje/sum(x$Porcentaje)
names(x) <- c('Genero', 'Porcentaje')
class(x) <- 'data.frame'
p <- ggplot(x, aes(x=Genero, y=Porcentaje, fill=Genero)) + geom_bar(stat = 'identity')  +
scale_fill_manual(values=c('#604B89', 'orange')) + theme_minimal() +xlab('') +ylab('') +
ggtitle('Distribución del generó')
p
p <- ggplotly(p)
tabla2 %>% group_by(Fecha_Retiro) %>% summarise(viajes=n()) -> viajes.salida
p
#############################################
names(viajes.salida)
sapply(viajes.salida, class)
p <- ggplot(viajes.salida, aes(x=dmy(Fecha_Retiro), y=viajes)) + geom_line(colour='#604B89') +
xlim(c(ymd('2017-01-01'), ymd('2018-10-31'))) + theme_minimal() + xlab('Fecha') + ylab('Viajes por día') +
ggtitle('Viajes en ECOBICI')
p
ggplotly(p)
save(p, file='DelimitacionTiempo.Rdata')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
load('DelimitacionTiempo.Rdata')
load('DelimitacionTiempo.Rdata')
setwd("~/Desktop/Ecobici/DataSubset")
load('DelimitacionTiempo.Rdata')
setwd("~/Desktop/Ecobici/Shiny")
load('DelimitacionTiempo.Rdata')
DelimitacionTiempo <- p
save(DelimitacionTiempo, 'DelimitacionTiempo.Rdata')
save(DelimitacionTiempo, file ='DelimitacionTiempo.Rdata')
load('DelimitacionTiempo.Rdata')
load('DelimitacionTiempo.Rdata')
runApp()
setwd("/home/fou/Desktop/Ecobici/DataSubset/")
library(readr)
library(lubridate)
library(dplyr)
library(hms)
load( file='tablaFiltro.Rdata')
library(ggplot2)
library(plotly)
names(tabla2)
tabla2%>% select(Genero_Usuario, Edad_Usuario ) %>% group_by(Genero_Usuario, Edad_Usuario) %>%
summarise(Porcentaje =n()) -> x
x %>% group_by(Genero_Usuario)%>% summarise(Porcentaje=sum(Porcentaje)) -> x
x$Porcentaje <- x$Porcentaje/sum(x$Porcentaje)
names(x) <- c('Genero', 'Porcentaje')
class(x) <- 'data.frame'
p <- ggplot(x, aes(x=Genero, y=Porcentaje, fill=Genero)) + geom_bar(stat = 'identity')  +
scale_fill_manual(values=c('#604B89', 'orange')) + theme_minimal() +xlab('') +ylab('') +
ggtitle('Distribución del generó')
p <- ggplotly(p)
tabla2 %>% group_by(Fecha_Retiro) %>% summarise(viajes=n()) -> viajes.salida
p
genero <- p
save(genero, file='genero.Rdata')
#############################################
names(viajes.salida)
sapply(viajes.salida, class)
p <- ggplot(viajes.salida, aes(x=dmy(Fecha_Retiro), y=viajes)) + geom_line(colour='#604B89') +
xlim(c(ymd('2017-01-01'), ymd('2018-10-31'))) + theme_minimal() + xlab('Fecha') + ylab('Viajes por día') +
ggtitle('Viajes en ECOBICI')
p
ggplotly(p)
hora <- p
###############################
# En que horarios hay mayor afluencia ?
##############################
tabla2 %>% select(Hora_Retiro) %>%  group_by(Hora_Retiro) %>% summarise(viajes=n()) -> horarios
horarios$Hora_Retiro <- as.hms(horarios$Hora_Retiro)
p <- ggplot(horarios, aes(x=Hora_Retiro , y=viajes)) + geom_line(colour='#604B89') +
theme_minimal() + xlab('Horario') + ylab('Viajes') +
ggtitle('Viajes en ECOBICI, por segundo')
p <- ggplotly(p)
p
hora <- p
save(hora, file='genero.Rdata')
load( file='tablaFiltro.Rdata')
library(ggplot2)
library(plotly)
names(tabla2)
tabla2%>% select(Genero_Usuario, Edad_Usuario ) %>% group_by(Genero_Usuario, Edad_Usuario) %>%
summarise(Porcentaje =n()) -> x
x %>% group_by(Genero_Usuario)%>% summarise(Porcentaje=sum(Porcentaje)) -> x
x$Porcentaje <- x$Porcentaje/sum(x$Porcentaje)
names(x) <- c('Genero', 'Porcentaje')
class(x) <- 'data.frame'
p <- ggplot(x, aes(x=Genero, y=Porcentaje, fill=Genero)) + geom_bar(stat = 'identity')  +
scale_fill_manual(values=c('#604B89', 'orange')) + theme_minimal() +xlab('') +ylab('') +
ggtitle('Distribución del generó')
p <- ggplotly(p)
tabla2 %>% group_by(Fecha_Retiro) %>% summarise(viajes=n()) -> viajes.salida
p
genero <- p
save(genero, file='genero.Rdata')
#############################################
names(viajes.salida)
sapply(viajes.salida, class)
p <- ggplot(viajes.salida, aes(x=dmy(Fecha_Retiro), y=viajes)) + geom_line(colour='#604B89') +
xlim(c(ymd('2017-01-01'), ymd('2018-10-31'))) + theme_minimal() + xlab('Fecha') + ylab('Viajes por día') +
ggtitle('Viajes en ECOBICI')
p
ggplotly(p)
hora <- p
###############################
# En que horarios hay mayor afluencia ?
##############################
tabla2 %>% select(Hora_Retiro) %>%  group_by(Hora_Retiro) %>% summarise(viajes=n()) -> horarios
horarios$Hora_Retiro <- as.hms(horarios$Hora_Retiro)
p <- ggplot(horarios, aes(x=Hora_Retiro , y=viajes)) + geom_line(colour='#604B89') +
theme_minimal() + xlab('Horario') + ylab('Viajes') +
ggtitle('Viajes en ECOBICI, por segundo')
p <- ggplotly(p)
p
hora <- p
save(hora, file='hora.Rdata')
runApp('~/Desktop/Ecobici/Shiny')
runApp('~/Desktop/Ecobici/Shiny')
load('genero.Rdata')
load('hora.Rdata')
setwd("~/Desktop/Ecobici/Shiny")
load('genero.Rdata')
load('hora.Rdata')
runApp()
shiny::runApp()
library(cluster)
library(smacof)
library(plotly)
library(ggplot2)
library(cluster)
library(smacof)
library(rpart)
library(plotly)
# Aplicaci?n MDS -------------------------------------------------------------------
# Esto solo es para sacar los datos
setwd("/home/fou/Desktop/MCE2/4/SPI2019/Modelacion")
DataFrame.Transformadores.Verdes <- read.csv("dataframeVerdesPresentes.csv", sep = ",")
DataFrame.Transformadores.Verdes <- DataFrame.Transformadores.Verdes[,-1]
numerovariablesV <- ncol(DataFrame.Transformadores.Verdes)
Omitir <- c(1,2,3,8,9)
Categoricas <- c(4,5,6,11,12,18,19,20,21,28,29,30,31,35,55,57,63,64,65,66,67,69,70,71,72,73,74,75,76,77,88,89,90,100,101,111,112,114,117,130,132,133,134,135,139,140,141,142,143,144,145,146,147,148,170)
embarque <- 29:34
numericas <- c(13,15,17,22,23,24,25,26,27,32,33,34,36,37,38,45,46,47,48,49,50,58,59,60,68,78,79,80,81,82,83,84,85,86,87,91,93,94,97,98,102,106,107,126,127,128,129)
sapply(i <- Categoricas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
sapply(i <- numericas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
sapply(i <- Categoricas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
Categoricas
# Aplicaci?n MDS -------------------------------------------------------------------
# Esto solo es para sacar los datos
setwd("/home/fou/Desktop/MCE2/4/SPI2019/Modelacion")
#DataFrame.Transformadores.Verdes <- read.csv("dataframeVerdesPresentes.csv", sep = ",")
DataFrame.Transformadores.Verdes <- DataFrame.Transformadores.Verdes[,-1]
numerovariablesV <- ncol(DataFrame.Transformadores.Verdes)
Omitir <- c(1,2,3,8,9)
Categoricas <- c(4,5,6,11,12,18,19,20,21,28,29,30,31,35,55,57,63,64,65,66,67,69,70,71,72,73,74,75,76,77,88,89,90,100,101,111,112,114,117,130,132,133,134,135,139,140,141,142,143,144,145,146,147,148,170)
embarque <- 29:34
numericas <- c(13,15,17,22,23,24,25,26,27,32,33,34,36,37,38,45,46,47,48,49,50,58,59,60,68,78,79,80,81,82,83,84,85,86,87,91,93,94,97,98,102,106,107,126,127,128,129)
sapply(i <- Categoricas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
sapply(i <- numericas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
Categoricas
# Aplicaci?n MDS -------------------------------------------------------------------
# Esto solo es para sacar los datos
setwd("/home/fou/Desktop/MCE2/4/SPI2019/Modelacion")
DataFrame.Transformadores.Verdes <- read.csv("dataframeVerdesPresentes.csv", sep = ",")
#DataFrame.Transformadores.Verdes <- DataFrame.Transformadores.Verdes[,-1]
numerovariablesV <- ncol(DataFrame.Transformadores.Verdes)
Omitir <- c(1,2,3,8,9)
Categoricas <- c(4,5,6,11,12,18,19,20,21,28,29,30,31,35,55,57,63,64,65,66,67,69,70,71,72,73,74,75,76,77,88,89,90,100,101,111,112,114,117,130,132,133,134,135,139,140,141,142,143,144,145,146,147,148,170)
embarque <- 29:34
numericas <- c(13,15,17,22,23,24,25,26,27,32,33,34,36,37,38,45,46,47,48,49,50,58,59,60,68,78,79,80,81,82,83,84,85,86,87,91,93,94,97,98,102,106,107,126,127,128,129)
sapply(i <- Categoricas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
sapply(i <- numericas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
for(i in Categoricas) {
DataFrame.Transformadores.Verdes[,i] <- factor(DataFrame.Transformadores.Verdes[,i])
}
for(i in numericas) {
DataFrame.Transformadores.Verdes[,i] <- as.numeric(DataFrame.Transformadores.Verdes[,i])
}
sapply(i <- Categoricas, function(i) { DataFrame.Transformadores.Verdes[,i] })
sapply(i <- numericas, function(i) { DataFrame.Transformadores.Verdes[,i] })
names(DataFrame.Transformadores.Verdes[,numericas])
names(DataFrame.Transformadores.Verdes[,Categoricas])
DataFrame <- DataFrame.Transformadores.Verdes[,-Omitir]
Project.LMDS <- function(DataFrame, Nuevo.Punto, Punto.Referencia){
# Creamos medida de disimilaridad omitiendo las variables administrativas
Disimilaridad <- daisy(DataFrame,  metric = "gower")
# Hacemos MDS cl?sico en 2 dimensiones
MDSc <- cmdscale(Disimilaridad, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE)
# Sacamos las cpsas para LMDS
Delta <- as.matrix(Disimilaridad)^2
dmu <- colMeans(Delta)
Lkg <- pseudoinverse(MDSc)
Distancias <- daisy(rbind(Nuevo.Punto,Punto.Referencia,DataFrame),  metric = "gower")
Delta.test <- t(as.matrix(Distancias)[1:2,-c(1,2)])^2
Nuevos <- t(sapply(i <- 1:2, function(i) { -0.5*Lkg%*%(Delta.test[,i]-dmu) }))
gg <- data.frame(D1 = MDSc[,1],D2 = MDSc[,2], c = Folder) # Puntos base
nn <- data.frame(D1 = Nuevos[,1], D2 = Nuevos[,2]) # Puntos a proyectar
ggplot( gg, aes(x = D1, y = D2)) +
geom_text(label = gg$c, colour = "black") +
xlab("Dimensi?n 1") +
ylab("Dimensi?n 2") +
ggtitle("Escalamiento multidimensional", subtitle = "usando datos de referencia") +
geom_point(data = nn[2,], aes(x = D1, y = D2),
colour = "black", shape = 17, size = 5) +
geom_point(data = nn[1,], aes(x = D1, y = D2),
colour = "red", pch = 16, size = 4)
}
Nuevo.Punto <- DataFrame[167,]
Punto.Referencia <- DataFrame[1,]
Project.LMDS(DataFrame = DataFrame, Nuevo.Punto = Punto, Punto.Referencia = Punto.Referencia)
# Creamos medida de disimilaridad omitiendo las variables administrativas
Disimilaridad <- daisy(DataFrame,  metric = "gower")
# Hacemos MDS cl?sico en 2 dimensiones
MDSc <- cmdscale(Disimilaridad, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE)
# Sacamos las cpsas para LMDS
Delta <- as.matrix(Disimilaridad)^2
dmu <- colMeans(Delta)
Lkg <- pseudoinverse(MDSc)
Distancias <- daisy(rbind(Nuevo.Punto,Punto.Referencia,DataFrame),  metric = "gower")
library(cluster)
library(smacof)
library(rpart)
library(plotly)
library(corpcor)
# Aplicaci?n MDS -------------------------------------------------------------------
# Esto solo es para sacar los datos
setwd("/home/fou/Desktop/MCE2/4/SPI2019/Modelacion")
DataFrame.Transformadores.Verdes <- read.csv("dataframeVerdesPresentes.csv", sep = ",")
#DataFrame.Transformadores.Verdes <- DataFrame.Transformadores.Verdes[,-1]
numerovariablesV <- ncol(DataFrame.Transformadores.Verdes)
Omitir <- c(1,2,3,8,9)
Categoricas <- c(4,5,6,11,12,18,19,20,21,28,29,30,31,35,55,57,63,64,65,66,67,69,70,71,72,73,74,75,76,77,88,89,90,100,101,111,112,114,117,130,132,133,134,135,139,140,141,142,143,144,145,146,147,148,170)
embarque <- 29:34
numericas <- c(13,15,17,22,23,24,25,26,27,32,33,34,36,37,38,45,46,47,48,49,50,58,59,60,68,78,79,80,81,82,83,84,85,86,87,91,93,94,97,98,102,106,107,126,127,128,129)
sapply(i <- Categoricas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
sapply(i <- numericas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
for(i in Categoricas) {
DataFrame.Transformadores.Verdes[,i] <- factor(DataFrame.Transformadores.Verdes[,i])
}
for(i in numericas) {
DataFrame.Transformadores.Verdes[,i] <- as.numeric(DataFrame.Transformadores.Verdes[,i])
}
sapply(i <- Categoricas, function(i) { DataFrame.Transformadores.Verdes[,i] })
sapply(i <- numericas, function(i) { DataFrame.Transformadores.Verdes[,i] })
names(DataFrame.Transformadores.Verdes[,numericas])
names(DataFrame.Transformadores.Verdes[,Categoricas])
DataFrame <- DataFrame.Transformadores.Verdes[,-Omitir]
Project.LMDS <- function(DataFrame, Nuevo.Punto, Punto.Referencia){
# Creamos medida de disimilaridad omitiendo las variables administrativas
Disimilaridad <- daisy(DataFrame,  metric = "gower")
# Hacemos MDS cl?sico en 2 dimensiones
MDSc <- cmdscale(Disimilaridad, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE)
# Sacamos las cpsas para LMDS
Delta <- as.matrix(Disimilaridad)^2
dmu <- colMeans(Delta)
Lkg <- pseudoinverse(MDSc)
Distancias <- daisy(rbind(Nuevo.Punto,Punto.Referencia,DataFrame),  metric = "gower")
Delta.test <- t(as.matrix(Distancias)[1:2,-c(1,2)])^2
Nuevos <- t(sapply(i <- 1:2, function(i) { -0.5*Lkg%*%(Delta.test[,i]-dmu) }))
gg <- data.frame(D1 = MDSc[,1],D2 = MDSc[,2], c = Folder) # Puntos base
nn <- data.frame(D1 = Nuevos[,1], D2 = Nuevos[,2]) # Puntos a proyectar
ggplot( gg, aes(x = D1, y = D2)) +
geom_text(label = gg$c, colour = "black") +
xlab("Dimensi?n 1") +
ylab("Dimensi?n 2") +
ggtitle("Escalamiento multidimensional", subtitle = "usando datos de referencia") +
geom_point(data = nn[2,], aes(x = D1, y = D2),
colour = "black", shape = 17, size = 5) +
geom_point(data = nn[1,], aes(x = D1, y = D2),
colour = "red", pch = 16, size = 4)
}
Nuevo.Punto <- DataFrame[167,]
Punto.Referencia <- DataFrame[1,]
Project.LMDS(DataFrame = DataFrame, Nuevo.Punto = Punto, Punto.Referencia = Punto.Referencia)
# Creamos medida de disimilaridad omitiendo las variables administrativas
Disimilaridad <- daisy(DataFrame,  metric = "gower")
# Hacemos MDS cl?sico en 2 dimensiones
MDSc <- cmdscale(Disimilaridad, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE)
# Sacamos las cpsas para LMDS
Delta <- as.matrix(Disimilaridad)^2
dmu <- colMeans(Delta)
Lkg <- pseudoinverse(MDSc)
library(corpcor)
install.packages("corpcor")
library(cluster)
library(smacof)
library(rpart)
library(plotly)
library(corpcor)
# Aplicaci?n MDS -------------------------------------------------------------------
# Esto solo es para sacar los datos
setwd("/home/fou/Desktop/MCE2/4/SPI2019/Modelacion")
DataFrame.Transformadores.Verdes <- read.csv("dataframeVerdesPresentes.csv", sep = ",")
#DataFrame.Transformadores.Verdes <- DataFrame.Transformadores.Verdes[,-1]
numerovariablesV <- ncol(DataFrame.Transformadores.Verdes)
Omitir <- c(1,2,3,8,9)
Categoricas <- c(4,5,6,11,12,18,19,20,21,28,29,30,31,35,55,57,63,64,65,66,67,69,70,71,72,73,74,75,76,77,88,89,90,100,101,111,112,114,117,130,132,133,134,135,139,140,141,142,143,144,145,146,147,148,170)
embarque <- 29:34
numericas <- c(13,15,17,22,23,24,25,26,27,32,33,34,36,37,38,45,46,47,48,49,50,58,59,60,68,78,79,80,81,82,83,84,85,86,87,91,93,94,97,98,102,106,107,126,127,128,129)
sapply(i <- Categoricas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
sapply(i <- numericas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
for(i in Categoricas) {
DataFrame.Transformadores.Verdes[,i] <- factor(DataFrame.Transformadores.Verdes[,i])
}
for(i in numericas) {
DataFrame.Transformadores.Verdes[,i] <- as.numeric(DataFrame.Transformadores.Verdes[,i])
}
sapply(i <- Categoricas, function(i) { DataFrame.Transformadores.Verdes[,i] })
sapply(i <- numericas, function(i) { DataFrame.Transformadores.Verdes[,i] })
names(DataFrame.Transformadores.Verdes[,numericas])
names(DataFrame.Transformadores.Verdes[,Categoricas])
DataFrame <- DataFrame.Transformadores.Verdes[,-Omitir]
Project.LMDS <- function(DataFrame, Nuevo.Punto, Punto.Referencia){
# Creamos medida de disimilaridad omitiendo las variables administrativas
Disimilaridad <- daisy(DataFrame,  metric = "gower")
# Hacemos MDS cl?sico en 2 dimensiones
MDSc <- cmdscale(Disimilaridad, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE)
# Sacamos las cpsas para LMDS
Delta <- as.matrix(Disimilaridad)^2
dmu <- colMeans(Delta)
Lkg <- pseudoinverse(MDSc)
Distancias <- daisy(rbind(Nuevo.Punto,Punto.Referencia,DataFrame),  metric = "gower")
Delta.test <- t(as.matrix(Distancias)[1:2,-c(1,2)])^2
Nuevos <- t(sapply(i <- 1:2, function(i) { -0.5*Lkg%*%(Delta.test[,i]-dmu) }))
gg <- data.frame(D1 = MDSc[,1],D2 = MDSc[,2], c = Folder) # Puntos base
nn <- data.frame(D1 = Nuevos[,1], D2 = Nuevos[,2]) # Puntos a proyectar
ggplot( gg, aes(x = D1, y = D2)) +
geom_text(label = gg$c, colour = "black") +
xlab("Dimensi?n 1") +
ylab("Dimensi?n 2") +
ggtitle("Escalamiento multidimensional", subtitle = "usando datos de referencia") +
geom_point(data = nn[2,], aes(x = D1, y = D2),
colour = "black", shape = 17, size = 5) +
geom_point(data = nn[1,], aes(x = D1, y = D2),
colour = "red", pch = 16, size = 4)
}
Nuevo.Punto <- DataFrame[167,]
Punto.Referencia <- DataFrame[1,]
Project.LMDS(DataFrame = DataFrame, Nuevo.Punto = Punto, Punto.Referencia = Punto.Referencia)
rbind(Punto,DataFrame)
# Creamos medida de disimilaridad omitiendo las variables administrativas
Disimilaridad <- daisy(DataFrame,  metric = "gower")
# Hacemos MDS cl?sico en 2 dimensiones
MDSc <- cmdscale(Disimilaridad, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE)
# Sacamos las cpsas para LMDS
Delta <- as.matrix(Disimilaridad)^2
dmu <- colMeans(Delta)
Lkg <- pseudoinverse(MDSc)
Distancias <- daisy(rbind(Nuevo.Punto,Punto.Referencia,DataFrame),  metric = "gower")
Delta.test <- t(as.matrix(Distancias)[1:2,-c(1,2)])^2
Nuevos <- t(sapply(i <- 1:2, function(i) { -0.5*Lkg%*%(Delta.test[,i]-dmu) }))
gg <- data.frame(D1 = MDSc[,1],D2 = MDSc[,2], c = Folder) # Puntos base
library(cluster)
library(smacof)
library(rpart)
library(plotly)
library(corpcor)
Folder <- c(rep("M",35),rep("C",81),rep("E",51))
# Aplicaci?n MDS -------------------------------------------------------------------
# Esto solo es para sacar los datos
setwd("/home/fou/Desktop/MCE2/4/SPI2019/Modelacion")
DataFrame.Transformadores.Verdes <- read.csv("dataframeVerdesPresentes.csv", sep = ",")
#DataFrame.Transformadores.Verdes <- DataFrame.Transformadores.Verdes[,-1]
numerovariablesV <- ncol(DataFrame.Transformadores.Verdes)
Omitir <- c(1,2,3,8,9)
Categoricas <- c(4,5,6,11,12,18,19,20,21,28,29,30,31,35,55,57,63,64,65,66,67,69,70,71,72,73,74,75,76,77,88,89,90,100,101,111,112,114,117,130,132,133,134,135,139,140,141,142,143,144,145,146,147,148,170)
embarque <- 29:34
numericas <- c(13,15,17,22,23,24,25,26,27,32,33,34,36,37,38,45,46,47,48,49,50,58,59,60,68,78,79,80,81,82,83,84,85,86,87,91,93,94,97,98,102,106,107,126,127,128,129)
sapply(i <- Categoricas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
sapply(i <- numericas, function(i) { class(DataFrame.Transformadores.Verdes[,i]) })
for(i in Categoricas) {
DataFrame.Transformadores.Verdes[,i] <- factor(DataFrame.Transformadores.Verdes[,i])
}
for(i in numericas) {
DataFrame.Transformadores.Verdes[,i] <- as.numeric(DataFrame.Transformadores.Verdes[,i])
}
sapply(i <- Categoricas, function(i) { DataFrame.Transformadores.Verdes[,i] })
sapply(i <- numericas, function(i) { DataFrame.Transformadores.Verdes[,i] })
names(DataFrame.Transformadores.Verdes[,numericas])
names(DataFrame.Transformadores.Verdes[,Categoricas])
DataFrame <- DataFrame.Transformadores.Verdes[,-Omitir]
Project.LMDS <- function(DataFrame, Nuevo.Punto, Punto.Referencia){
# Creamos medida de disimilaridad omitiendo las variables administrativas
Disimilaridad <- daisy(DataFrame,  metric = "gower")
# Hacemos MDS cl?sico en 2 dimensiones
MDSc <- cmdscale(Disimilaridad, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE)
# Sacamos las cpsas para LMDS
Delta <- as.matrix(Disimilaridad)^2
dmu <- colMeans(Delta)
Lkg <- pseudoinverse(MDSc)
Distancias <- daisy(rbind(Nuevo.Punto,Punto.Referencia,DataFrame),  metric = "gower")
Delta.test <- t(as.matrix(Distancias)[1:2,-c(1,2)])^2
Nuevos <- t(sapply(i <- 1:2, function(i) { -0.5*Lkg%*%(Delta.test[,i]-dmu) }))
gg <- data.frame(D1 = MDSc[,1],D2 = MDSc[,2], c = Folder) # Puntos base
nn <- data.frame(D1 = Nuevos[,1], D2 = Nuevos[,2]) # Puntos a proyectar
ggplot( gg, aes(x = D1, y = D2)) +
geom_text(label = gg$c, colour = "black") +
xlab("Dimensi?n 1") +
ylab("Dimensi?n 2") +
ggtitle("Escalamiento multidimensional", subtitle = "usando datos de referencia") +
geom_point(data = nn[2,], aes(x = D1, y = D2),
colour = "black", shape = 17, size = 5) +
geom_point(data = nn[1,], aes(x = D1, y = D2),
colour = "red", pch = 16, size = 4)
}
Nuevo.Punto <- DataFrame[167,]
Punto.Referencia <- DataFrame[1,]
Project.LMDS(DataFrame = DataFrame, Nuevo.Punto = Punto, Punto.Referencia = Punto.Referencia)
# Creamos medida de disimilaridad omitiendo las variables administrativas
Disimilaridad <- daisy(DataFrame,  metric = "gower")
# Hacemos MDS cl?sico en 2 dimensiones
MDSc <- cmdscale(Disimilaridad, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE)
# Sacamos las cpsas para LMDS
Delta <- as.matrix(Disimilaridad)^2
dmu <- colMeans(Delta)
Lkg <- pseudoinverse(MDSc)
Distancias <- daisy(rbind(Nuevo.Punto,Punto.Referencia,DataFrame),  metric = "gower")
Delta.test <- t(as.matrix(Distancias)[1:2,-c(1,2)])^2
Nuevos <- t(sapply(i <- 1:2, function(i) { -0.5*Lkg%*%(Delta.test[,i]-dmu) }))
gg <- data.frame(D1 = MDSc[,1],D2 = MDSc[,2], c = Folder) # Puntos base
nn <- data.frame(D1 = Nuevos[,1], D2 = Nuevos[,2]) # Puntos a proyectar
ggplot( gg, aes(x = D1, y = D2)) +
geom_text(label = gg$c, colour = "black") +
xlab("Dimensi?n 1") +
ylab("Dimensi?n 2") +
ggtitle("Escalamiento multidimensional", subtitle = "usando datos de referencia") +
geom_point(data = nn[2,], aes(x = D1, y = D2),
colour = "black", shape = 17, size = 5) +
geom_point(data = nn[1,], aes(x = D1, y = D2),
colour = "red", pch = 16, size = 4)
Nuevo.Punto <- DataFrame[167,]
Punto.Referencia <- DataFrame[1,]
Project.LMDS(DataFrame = DataFrame, Nuevo.Punto = Punto, Punto.Referencia = Punto.Referencia)
Project.LMDS(DataFrame = DataFrame, Nuevo.Punto = Nuevo.Punto, Punto.Referencia = Punto.Referencia)
rbind(Punto,DataFrame)
