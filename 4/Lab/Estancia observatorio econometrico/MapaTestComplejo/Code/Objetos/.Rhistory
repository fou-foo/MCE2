dev.off()
k <- k+1
}
semana$Hora_Arribo <- NULL
remove(tabla4)
gc()
# Funciones
{
CambiaDia <- function( mes, anio) {
dmy(paste0('01/', as.character(mes),"/", as.character(anio)))
}
Filtra <- function( mes, anio) {
semana %>% filter(Fecha_Retiro <= CambiaDia( mes, anio)) -> aux
(aux %>% group_by(Ciclo_Estacion_Retiro)) %>% summarise(viajes=n()) -> aux
aux <- merge(estacionesBase, aux, all.x=TRUE, by.x='stations.id', by.y='Ciclo_Estacion_Retiro')
aux <- na.omit(aux)
return(aux)
}
# Conteos de salidas por dia y hora de cada estacion
FiltraH <- function( mes, anio) {
a <- Filtra( mes, anio)
a
}
########################
# grid fino
##############
# Grid, construccion de grid fino
library(sp)
library(rgeos)
library(rgdal)
mex <- readOGR(dsn="C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Mapa\\df\\df_municipal.shp")
CDMX <- mex[as.character(mex@data$NOMBRE) %in% c('Miguel Hidalgo','CuauhtÃ©moc','Benito JuÃ¡rez'),]
plot(CDMX)
class(CDMX)
polys.1 <- CDMX@polygons[[1]]@Polygons[[1]]@coords
class(polys.1)
plot(polys.1)
puntos <- polys.1
Region <- gUnionCascaded(CDMX)
plot(Region)
estaciones$lat <- estaciones$stations.location$lat
estaciones$stations.location <- NULL
estaciones$lon <- estaciones$stations.location$lon
for( mes in c(2:12))
k <-0
{
for (anio in c(2017))
{
xx <- FiltraH( mes, anio)
# Lectura de coordenadas
names(xx)
table(xx$viajes)
names(estaciones)
foo <- merge(xx, estaciones, all.x=TRUE )
names(foo)
foo$stations.nearbyStations<-NULL
foo[, c(1,3,4,5,6,7,8,9,10)] <- NULL
names(foo)
library(sp)
y <- SpatialPointsDataFrame(coords = foo[, c('lon', 'lat')],
data = data.frame(viajes=foo$viajes), proj4string = CRS("+proj=longlat +datum=WGS84"))
points(y@coords, col=morado, pch=20, cex= y@data$viajes/30000)
Region -> CDMX
plot(Region)
library(geoR)
grid <- pred_grid(Region@polygons[[1]]@Polygons[[1]]@coords,by=.002)
plot(grid)
plot(Region)
points(grid, pch="+")
grid.fino <- locations.inside(grid, Region@polygons[[1]]@Polygons[[1]]@coords)
plot(grid.fino)
grid <- SpatialPoints(grid.fino, proj4string = y@proj4string)
plot(grid.fino)
points(y@coords, col=morado, pch=20, cex= y@data$viajes /sd(y@data$viajes))
# #
library(automap)
y <- SpatialPointsDataFrame(coords = foo[, c('lon', 'lat')],
data = data.frame(viajes=foo$viajes), proj4string = CRS("+proj=longlat +datum=WGS84"))
xxx <- as.data.frame(cbind(y@data, y@coords))
names(xxx)
class(xxx)
coordinates(xxx) =~ lon+lat
grid.nuevo <- as.data.frame(grid@coords)
head(grid.nuevo)
gridded(grid.nuevo) =~ Var1+Var2
names(xxx)
class(xxx)
kriging_result = autoKrige(log(viajes)~1, xxx, grid.nuevo)
plot(kriging_result)
###################
prediction = kriging_result$krige_output
jpeg(paste0('/home/fou/Desktop/Ecobici/Kriging_mes/',letters[k+1],'.jpg'))
plot(prediction, main=paste0('Viajes acumulados hasta mes ',as.character(mes) ,' aÃ±o ', as.character(anio)))
points(y, pch=4, col='blue', cex= 1)
dev.off()
k <- k+1
}
anio
mes
# Lectura de coordenadas
names(xx)
table(xx$viajes)
names(estaciones)
foo <- merge(xx, estaciones, all.x=TRUE )
names(foo)
foo$stations.nearbyStations<-NULL
foo[, c(1,3,4,5,6,7,8,9,10)] <- NULL
names(foo)
library(sp)
y <- SpatialPointsDataFrame(coords = foo[, c('lon', 'lat')],
data = data.frame(viajes=foo$viajes), proj4string = CRS("+proj=longlat +datum=WGS84"))
names(foo)
foo <- merge(xx, estaciones, all.x=TRUE )
names(foo)
names(estaciones)
# Lectura de coordenadas
names(xx)
table(xx$viajes)
names(estaciones)
foo <- merge(xx, estaciones, all.x=TRUE )
names(foo)
View(foo)
foo$stations.nearbyStations<-NULL
names(foo)
xx <- FiltraH( mes, anio)
# Lectura de coordenadas
names(xx)
xx <- FiltraH( mes, anio)
xx
estacionesBase
View(semana)
semana %>% filter(Fecha_Retiro <= CambiaDia( mes, anio)) -> aux
View(aux)
(aux %>% group_by(Ciclo_Estacion_Retiro)) %>% summarise(viajes=n()) -> aux
View(aux)
aux <- merge(estaciones, aux, all.x=TRUE, by.x='stations.id', by.y='Ciclo_Estacion_Retiro')
aux <- na.omit(aux)
aux <- merge(estaciones, aux, all.x=TRUE, by.x='stations.id', by.y='Ciclo_Estacion_Retiro')
(aux %>% group_by(Ciclo_Estacion_Retiro)) %>% summarise(viajes=n()) -> aux
semana %>% filter(Fecha_Retiro <= CambiaDia( mes, anio)) -> aux
(aux %>% group_by(Ciclo_Estacion_Retiro)) %>% summarise(viajes=n()) -> aux
View(aux)
semana %>% filter(Fecha_Retiro <= CambiaDia( mes, anio)) -> aux
(aux %>% group_by(Ciclo_Estacion_Retiro)) %>% summarise(viajes=n()) -> aux
names(aux)
names(semana)
names(estaciones)
(aux %>% group_by(Ciclo_Estacion_Retiro)) %>% summarise(viajes=n()) -> aux
aux <- merge(estaciones, aux, all.x=TRUE, by.x='stations.id', by.y='Ciclo_Estacion_Retiro')
View(aux)
#################
# lectura de datos
##########
# --------------------------------
# Librerias y datos para el arranque
{
library(dplyr)
library(jsonlite)
library(lubridate) #manejo sencillo de fechas
#library(hms)
# --------------------------------
# Los registros preparados
load("C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Code\\Objetos\\tabla4.Rdata") # fijamos directoria de descarga de todos los datos del portal
# --------------------------------
# Constantes
morado <- rgb(t(col2rgb('#5C4788')/255), alpha= 0.5)
# --------------------------------
#Carga de las estaciones: "estaciones"
fromJSON('C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Mapa\\estaciones.json') %>% as.data.frame -> estaciones
estacionesBase <- as.data.frame(estaciones$stations.id)
colnames(estacionesBase) <- c("stations.id")
}
View(estaciones)
## Ajustando los formatos de fechas
tabla4$Fecha_Retiro <- ymd(tabla4$Fecha_Retiro)
gc()
Sys.sleep(4)
tabla4$Fecha_Arribo <- ymd(tabla4$Fecha_Arribo)
gc()
Sys.sleep(4)
# Muestra: Semana 2 del 2017
inicio <- dmy('09-01-2017')
fin    <- dmy('30-08-2018')
class(tabla4) <- 'data.frame'
tabla4 <- tabla4[tabla4$Fecha_Retiro>= inicio,]
tabla4 <- tabla4[tabla4$Fecha_Retiro<=fin,] -> semana
# Conteos de salida en la semana
semana %>% group_by(Ciclo_Estacion_Retiro, Fecha_Retiro) %>% summarise(viajes=n()) -> semana2
semana$Hora_Retiro <- NULL
semana$Hora_Arribo <- NULL
remove(tabla4)
gc()
# Funciones
{
CambiaDia <- function( mes, anio) {
dmy(paste0('01/', as.character(mes),"/", as.character(anio)))
}
Filtra <- function( mes, anio) {
semana %>% filter(Fecha_Retiro <= CambiaDia( mes, anio)) -> aux
(aux %>% group_by(Ciclo_Estacion_Retiro)) %>% summarise(viajes=n()) -> aux
aux <- merge(estaciones, aux, all.x=TRUE, by.x='stations.id', by.y='Ciclo_Estacion_Retiro')
aux <- na.omit(aux)
return(aux)
}
# Conteos de salidas por dia y hora de cada estacion
FiltraH <- function( mes, anio) {
a <- Filtra( mes, anio)
a
}
########################
# grid fino
##############
# Grid, construccion de grid fino
library(sp)
library(rgeos)
library(rgdal)
mex <- readOGR(dsn="C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Mapa\\df\\df_municipal.shp")
CDMX <- mex[as.character(mex@data$NOMBRE) %in% c('Miguel Hidalgo','CuauhtÃ©moc','Benito JuÃ¡rez'),]
plot(CDMX)
class(CDMX)
polys.1 <- CDMX@polygons[[1]]@Polygons[[1]]@coords
class(polys.1)
plot(polys.1)
puntos <- polys.1
Region <- gUnionCascaded(CDMX)
plot(Region)
estaciones$lat <- estaciones$stations.location$lat
estaciones$lon <- estaciones$stations.location$lon
estaciones$stations.location <- NULL
k <-0
for( mes in c(2:12))
{
for (anio in c(2017))
{
xx <- FiltraH( mes, anio)
# Lectura de coordenadas
names(xx)
table(xx$viajes)
names(estaciones)
foo <- merge(xx, estaciones, all.x=TRUE )
names(foo)
foo$stations.nearbyStations<-NULL
foo[, c(1,3,4,5,6,7,8,9,10)] <- NULL
names(foo)
library(sp)
y <- SpatialPointsDataFrame(coords = foo[, c('lon', 'lat')],
data = data.frame(viajes=foo$viajes), proj4string = CRS("+proj=longlat +datum=WGS84"))
points(y@coords, col=morado, pch=20, cex= y@data$viajes/30000)
Region -> CDMX
plot(Region)
library(geoR)
grid <- pred_grid(Region@polygons[[1]]@Polygons[[1]]@coords,by=.002)
plot(grid)
plot(Region)
points(grid, pch="+")
grid.fino <- locations.inside(grid, Region@polygons[[1]]@Polygons[[1]]@coords)
plot(grid.fino)
grid <- SpatialPoints(grid.fino, proj4string = y@proj4string)
plot(grid.fino)
points(y@coords, col=morado, pch=20, cex= y@data$viajes /sd(y@data$viajes))
# #
library(automap)
y <- SpatialPointsDataFrame(coords = foo[, c('lon', 'lat')],
data = data.frame(viajes=foo$viajes), proj4string = CRS("+proj=longlat +datum=WGS84"))
xxx <- as.data.frame(cbind(y@data, y@coords))
names(xxx)
class(xxx)
coordinates(xxx) =~ lon+lat
grid.nuevo <- as.data.frame(grid@coords)
head(grid.nuevo)
gridded(grid.nuevo) =~ Var1+Var2
names(xxx)
class(xxx)
kriging_result = autoKrige(log(viajes)~1, xxx, grid.nuevo)
plot(kriging_result)
###################
prediction = kriging_result$krige_output
jpeg(paste0('/home/fou/Desktop/Ecobici/Kriging_mes/',letters[k+1],'.jpg'))
plot(prediction, main=paste0('Viajes acumulados hasta mes ',as.character(mes) ,' aÃ±o ', as.character(anio)))
points(y, pch=4, col='blue', cex= 1)
dev.off()
k <- k+1
}
xx <- FiltraH( mes, anio)
#################
# lectura de datos
##########
# --------------------------------
# Librerias y datos para el arranque
{
library(dplyr)
library(jsonlite)
library(lubridate) #manejo sencillo de fechas
#library(hms)
# --------------------------------
# Los registros preparados
load("C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Code\\Objetos\\tabla4.Rdata") # fijamos directoria de descarga de todos los datos del portal
# --------------------------------
# Constantes
morado <- rgb(t(col2rgb('#5C4788')/255), alpha= 0.5)
# --------------------------------
#Carga de las estaciones: "estaciones"
fromJSON('C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Mapa\\estaciones.json') %>% as.data.frame -> estaciones
estacionesBase <- as.data.frame(estaciones$stations.id)
colnames(estacionesBase) <- c("stations.id")
}
## Ajustando los formatos de fechas
tabla4$Fecha_Retiro <- ymd(tabla4$Fecha_Retiro)
gc()
Sys.sleep(4)
# Muestra: Semana 2 del 2017
inicio <- dmy('09-01-2017')
fin    <- dmy('30-08-2018')
class(tabla4) <- 'data.frame'
tabla4 <- tabla4[tabla4$Fecha_Retiro>= inicio,]
tabla4 <- tabla4[tabla4$Fecha_Retiro<=fin,] -> semana
gc()
#################
# lectura de datos
##########
# --------------------------------
# Librerias y datos para el arranque
{
library(dplyr)
library(jsonlite)
library(lubridate) #manejo sencillo de fechas
#library(hms)
# --------------------------------
# Los registros preparados
load("C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Code\\Objetos\\tabla4.Rdata") # fijamos directoria de descarga de todos los datos del portal
# --------------------------------
# Constantes
morado <- rgb(t(col2rgb('#5C4788')/255), alpha= 0.5)
# --------------------------------
#Carga de las estaciones: "estaciones"
fromJSON('C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Mapa\\estaciones.json') %>% as.data.frame -> estaciones
estacionesBase <- as.data.frame(estaciones$stations.id)
colnames(estacionesBase) <- c("stations.id")
}
# Muestra: Semana 2 del 2017
inicio <- dmy('09-01-2017')
fin    <- dmy('30-08-2018')
class(tabla4) <- 'data.frame'
tabla4 <- tabla4[tabla4$Fecha_Retiro>= inicio,]
semana <- tabla4[tabla4$Fecha_Retiro<=fin,]
gc()
remove(tabla4)
gc()
# Conteos de salida en la semana
semana %>% group_by(Ciclo_Estacion_Retiro, Fecha_Retiro) %>% summarise(viajes=n()) -> semana2
semana$Hora_Retiro <- NULL
semana$Hora_Arribo <- NULL
# Funciones
{
CambiaDia <- function( mes, anio) {
dmy(paste0('01/', as.character(mes),"/", as.character(anio)))
}
Filtra <- function( mes, anio) {
semana %>% filter(Fecha_Retiro <= CambiaDia( mes, anio)) -> aux
(aux %>% group_by(Ciclo_Estacion_Retiro)) %>% summarise(viajes=n()) -> aux
aux <- merge(estaciones, aux, all.x=TRUE, by.x='stations.id', by.y='Ciclo_Estacion_Retiro')
aux <- na.omit(aux)
return(aux)
}
# Conteos de salidas por dia y hora de cada estacion
FiltraH <- function( mes, anio) {
a <- Filtra( mes, anio)
a
}
########################
# grid fino
##############
# Grid, construccion de grid fino
library(sp)
library(rgeos)
library(rgdal)
mex <- readOGR(dsn="C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Mapa\\df\\df_municipal.shp")
CDMX <- mex[as.character(mex@data$NOMBRE) %in% c('Miguel Hidalgo','CuauhtÃ©moc','Benito JuÃ¡rez'),]
plot(CDMX)
class(CDMX)
polys.1 <- CDMX@polygons[[1]]@Polygons[[1]]@coords
class(polys.1)
plot(polys.1)
puntos <- polys.1
Region <- gUnionCascaded(CDMX)
plot(Region)
estaciones$lat <- estaciones$stations.location$lat
estaciones$lon <- estaciones$stations.location$lon
estaciones$stations.location <- NULL
k <-0
for( mes in c(2:12))
{
for (anio in c(2017))
{
xx <- FiltraH( mes, anio)
# Lectura de coordenadas
names(xx)
table(xx$viajes)
names(estaciones)
foo <- merge(xx, estaciones, all.x=TRUE )
names(foo)
foo$stations.nearbyStations<-NULL
foo[, c(1,3,4,5,6,7,8,9,10)] <- NULL
names(foo)
library(sp)
y <- SpatialPointsDataFrame(coords = foo[, c('lon', 'lat')],
data = data.frame(viajes=foo$viajes), proj4string = CRS("+proj=longlat +datum=WGS84"))
points(y@coords, col=morado, pch=20, cex= y@data$viajes/30000)
Region -> CDMX
plot(Region)
library(geoR)
grid <- pred_grid(Region@polygons[[1]]@Polygons[[1]]@coords,by=.002)
plot(grid)
plot(Region)
points(grid, pch="+")
grid.fino <- locations.inside(grid, Region@polygons[[1]]@Polygons[[1]]@coords)
plot(grid.fino)
grid <- SpatialPoints(grid.fino, proj4string = y@proj4string)
plot(grid.fino)
points(y@coords, col=morado, pch=20, cex= y@data$viajes /sd(y@data$viajes))
# #
library(automap)
y <- SpatialPointsDataFrame(coords = foo[, c('lon', 'lat')],
data = data.frame(viajes=foo$viajes), proj4string = CRS("+proj=longlat +datum=WGS84"))
xxx <- as.data.frame(cbind(y@data, y@coords))
names(xxx)
class(xxx)
coordinates(xxx) =~ lon+lat
grid.nuevo <- as.data.frame(grid@coords)
head(grid.nuevo)
gridded(grid.nuevo) =~ Var1+Var2
names(xxx)
class(xxx)
kriging_result = autoKrige(log(viajes)~1, xxx, grid.nuevo)
plot(kriging_result)
###################
prediction = kriging_result$krige_output
jpeg(paste0('/home/fou/Desktop/Ecobici/Kriging_mes/',letters[k+1],'.jpg'))
plot(prediction, main=paste0('Viajes acumulados hasta mes ',as.character(mes) ,' aÃ±o ', as.character(anio)))
points(y, pch=4, col='blue', cex= 1)
dev.off()
k <- k+1
}
xx <- FiltraH( mes, anio)
View(xx)
30*500
shiny::runApp('Documents/GitHub/Ecobici/shinyApp')
4000/20
remove(list=ls())
require(gplots) # checar version comp
library(vars)
library(pls)
library(forecast)
library(mvtnorm)
library(ks)
dt.file <-"C:\\Users\\fou-f\\Documents\\GitHub\\MCE2\\4\\Lab\\Estancia observatorio econometrico\\"
source(paste(dt.file, "model_functions.r", sep =""))
regiones <- c("Frontera.norte", "Noroeste", "Noreste", "Centro.norte",
"Centro.sur", "Sur", "Mexico", "Nacional")
region   <- "Nacional" # Seleccionar la region que se quiere realizar
variable <- "Precios"  # La variable a modelar
mes      <- "dic"      # el mes actual
mes.pasado <- "ene"    # el nombre empleado para el mes anterior
titular <- 1          # 1 si quiero que aparezcan los titulos
length.fore <- 6       # Num. de meses a pronosticar (?con 3?)
lag.max  <- 12         # Para el numero de modelos
seas.max <- 12         # Para el numero de modelos
ec.det <- c("none", "const", "trend")
c.sig <- 0.10          # Nivel de significancia
show.data  <- 48       # Se utilizan los ?ltimos 4 a?os como ventana de tiempo
show.data2 <- 24       # Se utilizan los ?ltimos 2 a?os como ventana de tiempo
length.test <- 6       # El # de meses a probar el pron intramuestra (asociado a n.try)
n.try <- 6             # Rezagos a probar atras
restrict <- FALSE      # TRUE Si pronostico no puede superar min/max
setwd("C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Code\\Objetos") # fijamos directoria de descarga de todos los datos del portal
setwd("C:\\Users\\fou-f\\Documents\\GitHub\\MCE2\\4\\Lab\\Estancia observatorio econometrico\\MapaTestComplejo\\Code") # fijamos directoria de descarga de todos los datos del portal
#este objeto solo sirve para referencias puntos que fueron deinterees en el proyecto
load('puntos.Rdata') # este obejto contiene las coordenadas del objeto anterior
dir()
setwd("C:\\Users\\fou-f\\Documents\\GitHub\\MCE2\\4\\Lab\\Estancia observatorio econometrico\\MapaTestComplejo\\Code\\Objetos") # fijamos directoria de descarga de todos los datos del portal
#este objeto solo sirve para referencias puntos que fueron deinterees en el proyecto
load('puntos.Rdata') # este obejto contiene las coordenadas del objeto anterior
################## definicion de colores
###############
#morado <- rgb(t(col2rgb('purple')/255), alpha= 0.5)
#naranja <- rgb(t(col2rgb('orange')/255), alpha= 0.5)
#chido <- rgb(t(col2rgb('#0089E0')/255), alpha=0.5)
#color1 <- rgb(t(col2rgb('#FA00A4')/255), alpha=0.5)
#color2 <- rgb(t(col2rgb('#27D6C2')/255), alpha=0.5)
#color3 <- rgb(t(col2rgb('#442CBC')/255), alpha=0.5)
names(puntos)
row.names(puntos) <- NULL
library(geoR)
library(sp)
library(rgdal)
class(puntos)
names(puntos)
y <- SpatialPointsDataFrame(coords = puntos[, c('long', 'lat')],
data = data.frame(puntos[,2] ), proj4string = CRS("+proj=longlat +datum=WGS84"))
class(y)
names(y) <- c('viajes')
# el mapa de CDMX fue facilitado por el Dr. Victor, pero TIENE EN UN CD EL DE MEXICO A NIVEL AGEB
mex <- readOGR(dsn="C:\\Users\\fou-f\\Documents\\GitHub\\Ecobici\\Mapa\\df\\df_municipal.shp")
# el mapa de CDMX fue facilitado por el Dr. Victor, pero TIENE EN UN CD EL DE MEXICO A NIVEL AGEB
mex <- readOGR(dsn="C:\\Users\\fou-f\\Documents\\GitHub\\MCE2\\4\\Lab\\Estancia observatorio econometrico\\MapaTestComplejo\\Mapa\\df\\df_municipal.shp")
plot(mex)
# esta linea hace seleccciona solo los 'municipios' que antes eran 'delegaciones' de CDMX
CDMX <- mex[as.character(mex@data$NOMBRE) %in% c('Miguel Hidalgo','CuauhtÃ©moc','Benito JuÃ¡rez'),]
plot(CDMX) # la region de interes, en el caso de la frontera norte habria que seleccionar estados o agebs (enlistados, es una sola linea de codigo)
library(rgeos)
Region <- gUnionCascaded(CDMX) # esta linea es importante porque hacerlo 'a mano me llevo ~8hrs' (no sabia que ya estaba implementado, hasta que Victor me dijo )
plot(Region) # solo quitar lineas es complicado, definir la frontera norte se puede, pero si requiere de varias horas de leer documentacion y programar
